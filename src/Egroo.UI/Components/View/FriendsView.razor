@using Microsoft.AspNetCore.SignalR.Client
@using jihadkhawaja.chat.client.Core
@inherits ProtectedViewBase

@inject SessionStorage SessionStorage
@inject IUser ChatUserService
@inject ISnackbar Snackbar

@if (IsBusy)
{
    <MudProgressLinear Indeterminate />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-8">
            <MudText Typo="Typo.h6">Friends</MudText>
        </MudStack>

        <!-- Unified search field for friends and users to add -->
        <MudTextField T="string" Placeholder="Search friends or users to add" Value="@SearchQuery"
                      TextChanged="OnSearchUsers" Immediate Class="mb-4" />

        @if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            // Filter your existing friends based on the search query
            var filteredFriends = UserFriends
            .Where(f => f.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToArray();

            // From the search results, show users who are not already your friends
            var addableUsers = SearchedUsers
            .Where(u => !UserFriends.Any(f => f.Id == u.Id))
            .ToArray();

            <!-- Section for matching existing friends -->
            <MudText Typo="Typo.h6" Class="mb-2">Your Friends</MudText>
            @if (filteredFriends.Length == 0)
            {
                <MudText Class="mb-4">No friends found.</MudText>
            }
            else
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="0">
                    @foreach (var friend in filteredFriends)
                    {
                        <MudPaper Class="mb-4 pa-2 pl-6 rounded-lg" Outlined Elevation="2">
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <AvatarView User="@friend" />
                                        <ScopeView Title="@friend.Username" Subtitle=@string.Format("Last Seen {0}", friend.LastLoginDate?.Date.ToShortDateString()) />
                                    </MudStack>
                                </MudItem>
                                <MudItem>
                                    <MudIconButton Class="px-4 rounded-lg" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                   OnClick="@(async () => await RemoveFriend(friend.Username))" />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    }
                </MudStack>
            }

            <!-- Section for users you can add -->
            <MudText Typo="Typo.h6" Class="mb-2">Users You Can Add</MudText>
            @if (addableUsers.Length == 0)
            {
                <MudText Class="mb-4">No new users found.</MudText>
            }
            else
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="0">
                    @foreach (var user in addableUsers)
                    {
                        <MudPaper Class="mb-4 pa-2 pl-6 rounded-lg" Outlined Elevation="2">
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <AvatarView User="@user" />
                                        <ScopeView Title="@user.Username" Subtitle=@string.Format("Last Seen {0}", user.LastLoginDate?.Date.ToShortDateString()) />
                                    </MudStack>
                                </MudItem>
                                <MudItem>
                                    <MudIconButton Class="px-4 rounded-lg" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Filled.Add" Color="Color.Success"
                                                   OnClick="@(async () => await AddFriend(user.Username))" />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    }
                </MudStack>
            }
        }
        else
        {
            <!-- When no search query, show friend requests and the full friend list -->
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="0">
                @foreach (var friendRequest in UserFriendRequests ?? Enumerable.Empty<UserDto>())
                {
                    <MudPaper Class="mb-4 pa-2 pl-6 rounded-lg" Outlined Elevation="2">
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudItem>
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <AvatarView User="@friendRequest" />
                                    <ScopeView Title="@friendRequest.Username" Subtitle=@string.Format("Last Seen {0}", friendRequest.LastLoginDate?.Date.ToShortDateString()) />
                                </MudStack>
                            </MudItem>
                            <MudItem>
                                <MudStack Row Style="height:100%;">
                                    <MudIconButton Class="px-4 rounded-lg" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                                   OnClick="@(async () => await AcceptFriendRequest(friendRequest.Id))" />
                                    <MudIconButton Class="px-4 rounded-lg" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                                   OnClick="@(async () => await DenyFriendRequest(friendRequest.Id))" />
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudStack>

            <MudText Typo="Typo.h6" Class="mb-2">Your Friends</MudText>
            @if (UserFriends == null || !UserFriends.Any())
            {
                <MudText Class="mb-4">No friends yet.</MudText>
            }
            else
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="0">
                    @foreach (var friend in UserFriends)
                    {
                        <MudPaper Class="mb-4 pa-2 pl-6 rounded-lg" Outlined Elevation="2">
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem>
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        <AvatarView User="@friend" />
                                        <ScopeView Title="@friend.Username" Subtitle=@string.Format("Last Seen {0}", friend.LastLoginDate?.Date.ToShortDateString()) />
                                    </MudStack>
                                </MudItem>
                                <MudItem>
                                    <MudIconButton Class="px-4 rounded-lg" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                   OnClick="@(async () => await RemoveFriend(friend.Username))" />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    }
                </MudStack>
            }
        }
    </MudContainer>
}

@code {
    [Inject] IDialogService DialogService { get; set; } = null!;

    private IEnumerable<UserDto> UserFriendRequests { get; set; } = Array.Empty<UserDto>();
    private IEnumerable<UserDto> UserFriends { get; set; } = Array.Empty<UserDto>();
    private IEnumerable<UserDto> SearchedUsers { get; set; } = Array.Empty<UserDto>();

    private string? SearchQuery { get; set; }

    protected override void OnAccess()
    {
        IsBusy = true;
        RegisterFriendsEvents();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefetchData();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefetchData()
    {
        IsBusy = true;

        UserFriendRequests = await GetFriendsRequest();
        UserFriends = await GetUserFriends();
        _ = FetchUsersAvatar(UserFriends);

        IsBusy = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<UserDto[]> GetUserFriends()
    {
        UserFriend[]? userFriends = await ChatUserService.GetUserFriends(SessionStorage.User.Id);
        if (userFriends == null)
        {
            return Array.Empty<UserDto>();
        }
        UserDto[] users = new UserDto[userFriends.Length];

        for (int i = 0; i < userFriends.Length; i++)
        {
            if (SessionStorage.User.Id == userFriends[i].FriendUserId)
            {
                UserDto? user = await ChatUserService.GetUserPublicDetails(userFriends[i].UserId);
                user.Id = userFriends[i].UserId;
                users[i] = user;
            }
            else
            {
                UserDto? user = await ChatUserService.GetUserPublicDetails(userFriends[i].FriendUserId);
                user.Id = userFriends[i].FriendUserId;
                users[i] = user;
            }
        }
        return users;
    }

    private async Task FetchUsersAvatar(IEnumerable<UserDto> users)
    {
        foreach (var user in users)
        {
            user.AvatarPreview = await FetchUserAvatar(user.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<UserDto[]> GetFriendsRequest()
    {
        UserDto? sessionUser = SessionStorage.User;
        if (sessionUser == null)
        {
            return Array.Empty<UserDto>();
        }
        UserFriend[]? userFriendRequests = await ChatUserService.GetUserFriendRequests(sessionUser.Id);
        if (userFriendRequests == null)
        {
            return Array.Empty<UserDto>();
        }
        UserDto[] friendRequestsPublicUsers = new UserDto[userFriendRequests.Length];
        for (int i = 0; i < userFriendRequests.Length; i++)
        {
            UserDto? user = await ChatUserService.GetUserPublicDetails(userFriendRequests[i].UserId);
            user.Id = userFriendRequests[i].UserId;
            friendRequestsPublicUsers[i] = user;
        }
        return friendRequestsPublicUsers;
    }

    private async Task AddFriend(string usernameToAdd)
    {
        if (string.IsNullOrWhiteSpace(usernameToAdd))
        {
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            "Add Friend",
            $"Are you sure you want to add {usernameToAdd} as a friend?",
            yesText: "Add", cancelText: "Cancel");

        if (!result.HasValue || !result.Value)
        {
            return;
        }

        if (await ChatUserService.AddFriend(usernameToAdd))
        {
            Snackbar.Add($"Friend request sent!", Severity.Success);
            SearchQuery = string.Empty;
            SearchedUsers = Array.Empty<UserDto>();
            await RefetchData();
        }
        else
        {
            Snackbar.Add($"User doesn't exist", Severity.Error);
        }
    }

    private async Task RemoveFriend(string friendUsername)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Remove Friend",
            $"Are you sure you want to remove {friendUsername} from friends?",
            yesText: "Remove", cancelText: "Cancel");

        if (!result.HasValue || !result.Value)
        {
            return;
        }

        if (await ChatUserService.RemoveFriend(friendUsername))
        {
            Snackbar.Add($"Removed {friendUsername} from friends", Severity.Success);
            await RefetchData();
        }
        else
        {
            Snackbar.Add($"User doesn't exist", Severity.Error);
        }
    }

    private async Task AcceptFriendRequest(Guid friendId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Accept Friend Request",
            "Are you sure you want to accept this friend request?",
            yesText: "Accept Request", cancelText: "Cancel");

        if (!result.HasValue || !result.Value)
        {
            return;
        }

        if (await ChatUserService.AcceptFriend(friendId))
        {
            await RefetchData();
        }
        else
        {
            Snackbar.Add($"Something went wrong!", Severity.Error);
        }
    }

    private async Task DenyFriendRequest(Guid friendId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Deny Friend Request",
            "Are you sure you want to deny this friend request?",
            yesText: "Deny Request", cancelText: "Cancel");

        if (!result.HasValue || !result.Value)
        {
            return;
        }

        if (await ChatUserService.DenyFriend(friendId))
        {
            await RefetchData();
        }
        else
        {
            Snackbar.Add($"Something went wrong!", Severity.Error);
        }
    }

    private async Task OnSearchUsers(string value)
    {
        SearchQuery = value;
        if (string.IsNullOrWhiteSpace(value))
        {
            SearchedUsers = Array.Empty<UserDto>();
            await InvokeAsync(StateHasChanged);
            return;
        }
        SearchedUsers = await ChatUserService.SearchUser(value) ?? Array.Empty<UserDto>();
        await InvokeAsync(StateHasChanged);
    }

    private void RegisterFriendsEvents()
    {
        MobileChatSignalR.HubConnection?.On<Guid, bool>("FriendStatusChanged", async (userId, isOnline) =>
        {
            var friend = UserFriends.FirstOrDefault(f => f.Id == userId);
            if (friend != null)
            {
                friend.IsOnline = isOnline;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task<string?> FetchUserAvatar(Guid userId)
    {
        MediaResult? avatar = await ChatUserService.GetAvatar(userId);
        return SessionStorage.User?.CombineAvatarForPreview(avatar);
    }
}
