@using BlazorDexie.JsModule
@using Egroo.UI.Models;
@using jihadkhawaja.chat.client.CacheDB
@using jihadkhawaja.chat.client.Services;
@using jihadkhawaja.chat.shared.Models;
@inherits ProtectedViewBase

@inject SessionStorage SessionStorage
@inject NavigationManager NavigationManager
@inject StorageService StorageService
@inject IDialogService DialogService
@inject IUser ChatUserService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
    <!-- Page Header -->
    <MudText Typo="Typo.h3" GutterBottom="true">Settings</MudText>

    <!-- Loading Spinner -->
    @if (IsBusy)
    {
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" />
        return;
    }

    <!-- User Details Section -->
    @if(currentUser is not null && currentUser.UserDetail is not null)
    {
        <MudPaper Class="pa-4 my-4" Elevation="4">
            <MudForm @ref="userForm">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6">User Details</MudText>
                    <MudTextField Value="currentUser.Username" Label="Username" ReadOnly="true" Disabled />
                    <MudTextField @bind-Value="currentUser.UserDetail.FirstName" Label="First Name" />
                    <MudTextField @bind-Value="currentUser.UserDetail.LastName" Label="Last Name" />
                    <MudTextField @bind-Value="currentUser.UserDetail.DisplayName" Label="Display Name" />
                    <MudTextField @bind-Value="currentUser.UserDetail.Email" Label="Email" />
                    <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateUserDetails">
                        Save Changes
                    </MudButton>
                </MudStack>
            </MudForm>
        </MudPaper>
    }

    <!-- Account Section -->
    <MudPaper Class="pa-4 my-4" Elevation="4">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Account</MudText>
            <MudText Typo="Typo.body2">
                Use the button below to sign out of your account. You will have to log in again to access your data.
            </MudText>
            <MudButton Color="Color.Info" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Logout" OnClick="@(() => SignOut())">
                Logout
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Delete Account Section -->
    <MudPaper Class="pa-4 my-4" Elevation="4">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Delete Account</MudText>
            <MudText Color="Color.Error" Typo="Typo.body2">
                Permanently delete your account and <strong>all associated data</strong>. This action <strong>cannot</strong> be undone.
            </MudText>
            <MudButton Color="Color.Error" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Delete" OnClick="DeleteUser">
                DELETE ALL USER DATA
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Report a Problem / Send Feedback Section -->
    <MudPaper Class="pa-4 my-4" Elevation="4" hidden>
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Report a Problem / Send Feedback</MudText>
            <MudText Typo="Typo.body2">
                If you are experiencing issues or have suggestions for improvement, please share your feedback below.
            </MudText>
            <MudTextField @bind-Value="FeedbackText" Label="Your Feedback" Lines="4" FullWidth="true" />
            <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitFeedback">
                Submit Feedback
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private EgrooDB CacheDB { get; set; } = null!;
    private MudForm userForm = null!;
    private string FeedbackText { get; set; } = string.Empty;
    private UserDto currentUser = new();

    protected override async Task OnAccessAsync()
    {
        IsBusy = true;
        var moduleFactory = new EsModuleFactory(JSRuntime);
        CacheDB = new EgrooDB(moduleFactory);

        // Retrieve and initialize the current user
        currentUser = SessionStorage.User ?? new UserDto();
        var userWithDetail = await ChatUserService.GetUserPrivateDetails();
        if (userWithDetail is null)
        {
            currentUser.UserDetail = new UserDetail();
        }
        else
        {
            currentUser = userWithDetail;
        }
        IsBusy = false;
    }

    private async Task SignOut(bool hasDialog = true)
    {
        if (hasDialog)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning",
                "Are you sure you want to logout? All your locally saved messages will be deleted.",
                yesText: "Logout", cancelText: "Cancel");

            if (!result.HasValue || !result.Value)
            {
                return;
            }
        }

        switch (ClientModel.CurrentFrameworkPlatform)
        {
            case FrameworkPlatform.MAUI:
                string path = Path.Combine(ClientModel.AppDataPath);
                StorageService.DeleteDirectory(path);
                break;
            case FrameworkPlatform.WASM:
            case FrameworkPlatform.SERVER:
                await StorageService.RemoveFromLocalStorage("token");
                break;
            default:
                throw new Exception("CurrentFrameworkPlatform parameter is undefined.");
        }

        await CacheDB.Delete();

        SessionStorage.User = null;

        NavigationManager.NavigateTo("/", true);
    }

    private async Task DeleteUser()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete Account",
            "Are you sure you want to permanently delete your account and all associated data? This action cannot be undone.",
            yesText: "Delete", cancelText: "Cancel");

        if (!result.HasValue || !result.Value)
        {
            return;
        }

        await ChatUserService.DeleteUser();
        await SignOut(false);
    }

    private async Task SubmitFeedback()
    {
        if (string.IsNullOrWhiteSpace(FeedbackText))
        {
            await DialogService.ShowMessageBox("Feedback", "Please enter your feedback before submitting.");
            return;
        }

        // Send feedback logic (TODO)
        bool? confirmationResult = await DialogService.ShowMessageBox(
            "Feedback Submitted",
            "Thank you for your feedback!",
            yesText: "OK");

        if (confirmationResult.HasValue && confirmationResult.Value)
        {
            FeedbackText = string.Empty;
        }
    }

    private async Task UpdateUserDetails()
    {
        await userForm.Validate();
        if (!userForm.IsValid)
        {
            await DialogService.ShowMessageBox("Error", "Please correct the validation errors and try again.");
            return;
        }

        bool isusccess = await ChatUserService.UpdateDetails(
            displayname: currentUser.UserDetail?.DisplayName,
            email: currentUser.UserDetail?.Email,
            firstname: currentUser.UserDetail?.FirstName,
            lastname: currentUser.UserDetail?.LastName);

        if (!isusccess)
        {
            await DialogService.ShowMessageBox("Error", "Couldn't update user details.");
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            "User Details Updated",
            "Your user details and security settings have been saved.",
            yesText: "OK");

        if (result.HasValue && result.Value)
        {
            SessionStorage.User = currentUser;
        }
    }
}
