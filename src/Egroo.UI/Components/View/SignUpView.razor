@using FluentValidation
@using System.Text.RegularExpressions
@using Egroo.UI.Constants
@using System.Text.Json
@using Egroo.UI.Components.Layout
@using Egroo.UI.Models
@using jihadkhawaja.chat.client
@using jihadkhawaja.chat.client.Core
@using jihadkhawaja.chat.client.Services
@using jihadkhawaja.chat.shared.Models

@inject StorageService StorageService
@inject SessionStorage SessionStorage
@inject NavigationManager NavigationManager
@inject IAuthClient ChatAuthService
@inject IUser ChatUserService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="my-10 pt-8">
    <MudIconButton Icon="@Icons.Material.Filled.Home" Href="/" Size="Size.Large" Class="mb-4" />
    <MudText GutterBottom Color="Color.Secondary" Typo="Typo.h6">Sign Up</MudText>
    <MudText>
        Already have an account? <span><MudButton Href="signin">SIGNIN</MudButton></span>
    </MudText>

    <MudGrid Class="mt-8" Justify="Justify.Center">
        <MudItem xs="12" sm="8" md="6">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">Create Account</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudForm Model="@model" @ref="@form" Validation="@(UserValidator.ValidateValue)" ValidationDelay="0">
                        <MudTextField @bind-Value="model.Username"
                        For="@(() => model.Username)"
                        Immediate="true" Required
                        Label="Username" />

                        <MudTextField @bind-Value="password"
                        For="@(() => password)"
                        Immediate="true" Required
                        T="string" Label="Password" HelperText="Choose a strong password"
                        @ref="pwField1" InputType="InputType.Password" />

                        <MudTextField T="string"
                        Label="Confirm Password" HelperText="Repeat the password"
                        InputType="InputType.Password"
                        Validation="@(new Func<string, string>(PasswordMatch))" Required />
                    </MudForm>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    <MudButton OnClick="Submit" Disabled="@IsBusy" ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"
                    Style="width:50%;">SUBMIT</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    MudForm form;
    UserFluentValidator UserValidator;
    MudTextField<string> pwField1;
    UserDto model = new UserDto();
    string password;
    bool IsBusy = false;

    protected override void OnInitialized()
    {
        UserValidator = new UserFluentValidator(ChatUserService);
        base.OnInitialized();
    }

    private async Task Submit()
    {
        IsBusy = true;
        await form.Validate();

        // Validate the password separately using the dedicated validator
        var passwordValidator = new PasswordValidator();
        var passwordResult = passwordValidator.Validate(password);
        if (!passwordResult.IsValid)
        {
            foreach (var error in passwordResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, MudBlazor.Severity.Error);
            }
            IsBusy = false;
            return;
        }

        if (!form.IsValid)
        {
            Snackbar.Add("Please be sure to fill all fields correctly.", MudBlazor.Severity.Error);
            IsBusy = false;
            return;
        }

        try
        {
            // Use the strongly typed AuthResponse from the ChatAuthService
            var result = await ChatAuthService.SignUp(model?.Username, password);

            if (result != null && result.Success)
            {
                // Ensure both the UserId and Token are returned.
                if (result.UserId == null || string.IsNullOrEmpty(result.Token))
                {
                    Snackbar.Add("Invalid response from server.", MudBlazor.Severity.Error);
                    IsBusy = false;
                    return;
                }

                // Create the user object with the returned Id
                UserDto user = new() { Id = result.UserId.Value };
                var token = result.Token;

                // Store the token depending on the platform
                switch (ClientModel.CurrentFrameworkPlatform)
                {
                    case FrameworkPlatform.MAUI:
                        StorageService.CreateDirectory(ClientModel.AppDataPath);
                        StorageService.WriteToJsonFile("token", ClientModel.AppDataPath, token, false, true);
                        break;
                    case FrameworkPlatform.WASM:
                    case FrameworkPlatform.SERVER:
                        await StorageService.SetLocalStorage("token", token);
                        break;
                    default:
                        throw new Exception("CurrentFrameworkPlatform parameter is undefined.");
                }

                // Save token in session storage and initialize the SignalR connection
                SessionStorage.Token = token;
                SessionStorage.User = user;

                MobileChatSignalR.Initialize(Source.HubConnectionURL, SessionStorage.Token);
                await MobileChatSignalR.HubConnection.StartAsync();

                NavigationManager.NavigateTo("/channels", true);
            }
            else
            {
                // If the username is already taken, the error message should reflect that.
                Snackbar.Add(result?.Message ?? "Failed to sign up. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            IsBusy = false;
        }
    }

    private string PasswordMatch(string confirmPassword)
    {
        if (pwField1.Value != confirmPassword)
            return "Passwords don't match";
        return null;
    }

    public class UserFluentValidator : AbstractValidator<UserDto>
    {
        private readonly IUser ChatUserService;
        public UserFluentValidator(IUser ChatUserService)
        {
            this.ChatUserService = ChatUserService;

            RuleFor(x => x.Username)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .Matches(@"^[a-zA-Z0-9_]{3,16}$")
                .WithMessage("Username must be between 3 and 16 characters, and can only contain letters, numbers, and underscores.")
                // Async check for username availability
                .MustAsync(async (username, cancellation) =>
                {
                    return await ChatUserService.IsUsernameAvailable(username);
                })
                .WithMessage("Username is already taken.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserDto>.CreateWithOptions((UserDto)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    public class PasswordValidator : AbstractValidator<string>
    {
        public PasswordValidator()
        {
            RuleFor(p => p)
                .NotEmpty()
                .Matches(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$")
                .WithMessage("Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one symbol.");
        }
    }

}
