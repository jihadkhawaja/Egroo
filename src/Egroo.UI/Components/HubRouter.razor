@using Egroo.UI.Components.Layout
@using Egroo.UI.Models
@using Microsoft.AspNetCore.SignalR.Client
@using jihadkhawaja.chat.shared.Interfaces
@using jihadkhawaja.chat.client.Core
@using Egroo.UI.Constants
@using System.Text.Json
@using jihadkhawaja.chat.client.Services
@using jihadkhawaja.chat.shared.Models

@inject SessionStorage SessionStorage
@inject StorageService StorageService
@inject NavigationManager NavigationManager
@inject IUser ChatUserService
@inject IAuth ChatAuthService
@inject ISnackbar Snackbar

@if (IsBusy)
{
    <div style="width:100vw; height:100vh; background-color:var(--mud-palette-background)">
        <MudProgressLinear Indeterminate Color="Color.Primary" />
        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary" Class="pa-10">
            @GetAppState()
        </MudText>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool IsBusy { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        try
        {
            // If the connection is already established, update UI and exit.
            if (MobileChatSignalR.HubConnection is not null)
            {
                IsBusy = false;
                await InvokeAsync(StateHasChanged);
                return;
            }

            // Initialize session
            await LoadCacheAsync();
            await EstablishSessionAsync();
            await SetAppStateAsync(AppState.CONNECTED);
            PrintStateLog();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Initialization error: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsBusy = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Loads a token from local storage or file into the session storage.
    /// </summary>
    private async Task LoadCacheAsync()
    {
        if (!string.IsNullOrWhiteSpace(SessionStorage.Token))
            return;

        await SetAppStateAsync(AppState.LOADING_CACHE);

        switch (ClientModel.CurrentFrameworkPlatform)
        {
            case FrameworkPlatform.MAUI:
                SessionStorage.Token = StorageService.ReadFromJsonFile("token", ClientModel.AppDataPath, true);
                break;
            case FrameworkPlatform.WASM:
            case FrameworkPlatform.SERVER:
                SessionStorage.Token = await StorageService.GetFromLocalStorage("token");
                break;
            default:
                throw new Exception("CurrentFrameworkPlatform parameter is undefined.");
        }
    }

    /// <summary>
    /// Establishes a session by refreshing the token (if available) and setting up the SignalR connection.
    /// </summary>
    private async Task EstablishSessionAsync()
    {
        // Initialize and start the SignalR connection.
        MobileChatSignalR.Initialize(Source.HubConnectionURL, SessionStorage.Token);
        await SetAppStateAsync(AppState.ESTABLISHING_CONNECTION);
        await MobileChatSignalR.HubConnection!.StartAsync();

        // If a token exists, refresh session; otherwise, continue.
        if (!string.IsNullOrEmpty(SessionStorage.Token))
        {
            var refreshResponse = await ChatAuthService.RefreshSession(SessionStorage.Token);

            if (!refreshResponse.Success || string.IsNullOrWhiteSpace(refreshResponse.Token))
            {
                await SignOutAsync();
                return;
            }

            // Update token if it has changed.
            if (SessionStorage.Token != refreshResponse.Token)
            {
                SessionStorage.Token = refreshResponse.Token;
                await RestartSignalRConnectionAsync();
                await UpdateTokenStorageAsync(SessionStorage.Token);
            }

            // Update the user info in session.
            SessionStorage.User = new User
            {
                Id = refreshResponse.UserId ?? Guid.Empty,
                Username = await ChatUserService.GetCurrentUserUsername() ?? string.Empty,
                ConnectionId = MobileChatSignalR.HubConnection.ConnectionId
            };
        }
    }

    /// <summary>
    /// Stops and restarts the SignalR connection with a new token.
    /// </summary>
    private async Task RestartSignalRConnectionAsync()
    {
        await MobileChatSignalR.HubConnection.StopAsync();
        await MobileChatSignalR.HubConnection.DisposeAsync();

        MobileChatSignalR.Initialize(Source.HubConnectionURL, SessionStorage.Token);
        SessionStorage.AppState = AppState.CREATING_SESSION;
        await InvokeAsync(StateHasChanged);
        await MobileChatSignalR.HubConnection.StartAsync();
    }

    /// <summary>
    /// Updates the token in local storage or file based on the current platform.
    /// </summary>
    private async Task UpdateTokenStorageAsync(string token)
    {
        switch (ClientModel.CurrentFrameworkPlatform)
        {
            case FrameworkPlatform.MAUI:
                StorageService.CreateDirectory(ClientModel.AppDataPath);
                StorageService.WriteToJsonFile("token", ClientModel.AppDataPath, token, false, true);
                break;
            case FrameworkPlatform.WASM:
            case FrameworkPlatform.SERVER:
                await StorageService.SetLocalStorage("token", token);
                break;
            default:
                throw new Exception("CurrentFrameworkPlatform parameter is undefined.");
        }
    }

    /// <summary>
    /// Sets the current app state and triggers a UI update.
    /// </summary>
    private async Task SetAppStateAsync(AppState appState)
    {
        SessionStorage.AppState = appState;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Returns a string representation of the current app state.
    /// </summary>
    private string GetAppState() =>
        SessionStorage.AppState switch
        {
            AppState.INITIATING => "Initiating",
            AppState.LOADING_CACHE => "Loading Cache",
            AppState.ESTABLISHING_CONNECTION => "Establishing Connection",
            AppState.CREATING_SESSION => "Creating Session",
            AppState.CONNECTED => "Connected",
            _ => "Unknown"
        };

    /// <summary>
    /// Signs the user out by clearing token from storage and navigating to the home page.
    /// </summary>
    private async Task SignOutAsync()
    {
        switch (ClientModel.CurrentFrameworkPlatform)
        {
            case FrameworkPlatform.MAUI:
                var path = Path.Combine(ClientModel.AppDataPath);
                StorageService.DeleteDirectory(path);
                break;
            case FrameworkPlatform.WASM:
            case FrameworkPlatform.SERVER:
                await StorageService.RemoveFromLocalStorage("token");
                break;
            default:
                throw new Exception("CurrentFrameworkPlatform parameter is undefined.");
        }

        SessionStorage.User = null;
        NavigationManager.NavigateTo("/", true);
    }

    /// <summary>
    /// Called from JavaScript when the window is closed.
    /// 
    /// TODO: Use DI to resolve IChatUser rather than creating a new instance.
    /// </summary>
    [JSInvokable]
    public static async Task OnClosedWindow()
    {
        ChatUserService chatUserService = new ChatUserService();
        await chatUserService.CloseUserSession();
    }

    /// <summary>
    /// Prints app state and connection details to the console (only in DEBUG).
    /// </summary>
    private void PrintStateLog()
    {
#if DEBUG
        var log = $@"
        [State]         {SessionStorage.AppState}
        [Framework]     {ClientModel.CurrentFrameworkPlatform}
        [ConnectionId]  {SessionStorage.User?.ConnectionId}
        ";
        Console.WriteLine(log);
#endif
    }
}
