name: chat-deploy

on:
  push:
    branches: [ "main"]

  workflow_dispatch:

jobs:
  dotnet-build-api:
    name: Dotnet Build api
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore src/Egroo.Server/Egroo.Server.csproj
    - name: Build
      run: dotnet build --no-restore src/Egroo.Server/Egroo.Server.csproj
    - name: Test
      run: dotnet test --no-build --verbosity normal src/Egroo.Server/Egroo.Server.csproj
  docker-build-api:
    name: Docker Build api
    environment:
      name: 'Release API'
      url: "https://api.egroo.org"
    needs: dotnet-build-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create appsettings
        run: |
              echo '{
                "Logging": {
                  "LogLevel": {
                    "Default": "Information",
                    "Microsoft.AspNetCore": "Warning"
                  }
                },
                "Serilog": {
                  "WriteTo": [
                    {
                      "Name": "File",
                      "Args": {
                        "path": "logs/log.txt",
                        "rollingInterval": "Day"
                      }
                    },
                    {
                      "Name": "Console",
                      "Args": {
                        "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
                        "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
                      }
                    }
                  ]
                },
                "AllowedHosts": "*",
                "ConnectionStrings": {
                  "DefaultConnection": "Server='${{ secrets.REMOTE_HOST_DB }}';Port=5432;User Id='${{ secrets.REMOTE_USER_DB }}';Password='${{ secrets.REMOTE_PASSWORD }}';Database=egroo-prod;"
                },
                "Api": {
                  "AllowedOrigins": [ "https://egroo.org", "https://www.egroo.org"]
                },
                "Secrets": {
                  "Jwt": "${{ secrets.JWT_PROD }}"
                },
                "Encryption": {
                  "Key": "${{ secrets.ENCRYPTION_KEY }}",
                  "IV": "${{ secrets.ENCRYPTION_IV }}"
                }
              }' > src/Egroo.Server/appsettings.json
      - name: build docker image
        run: docker build -t jihadkhawaja/mobilechat-server-prod:latest -f src/Egroo.Server/Dockerfile .
      - name: save docker image
        run: |
             docker save -o mobilechat-server-prod.tar jihadkhawaja/mobilechat-server-prod
      - name: copy tar via ssh
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          port: 22
          source: "mobilechat-server-prod.tar"
          target: "/home/ubuntu/images"
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
            docker load -i /home/ubuntu/images/mobilechat-server-prod.tar
            rm /home/ubuntu/images/mobilechat-server-prod.tar
  dotnet-build-wasm:
    name: Dotnet Build wasm
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore src/Egroo/Egroo/Egroo.csproj
    - name: Build
      run: dotnet build --no-restore src/Egroo/Egroo/Egroo.csproj
    - name: Test
      run: dotnet test --no-build --verbosity normal src/Egroo/Egroo/Egroo.csproj
  docker-build-wasm:
    name: Docker Build wasm
    environment:
      name: 'Release WEB'
      url: "https://www.egroo.org"
    needs: dotnet-build-wasm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build docker image
        run: docker build -t jihadkhawaja/mobilechat-wasm-prod:latest -f src/Egroo/Egroo/Dockerfile .
      - name: save docker image
        run: |
             docker save -o mobilechat-wasm-prod.tar jihadkhawaja/mobilechat-wasm-prod
      - name: copy tar via ssh
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          port: 22
          source: "mobilechat-wasm-prod.tar"
          target: "/home/ubuntu/images"
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
            docker load -i /home/ubuntu/images/mobilechat-wasm-prod.tar
            rm /home/ubuntu/images/mobilechat-wasm-prod.tar
  docker-compose:
    name: Docker Compose
    needs: [docker-build-wasm,docker-build-api]
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: copy docker-compose via ssh
          uses: appleboy/scp-action@v0.1.3
          with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            key: ${{ secrets.KEY }}
            port: 22
            source: "src/docker-compose-egroo.yml"
            target: "/home/ubuntu/Configurations/"
        - name: executing remote ssh commands
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            key: ${{ secrets.KEY }}
            script: |
                docker compose -f Configurations/src/docker-compose-egroo.yml up -d --force-recreate
                docker image prune -f
