name: MSTest

on:
  pull_request:

  workflow_dispatch:

jobs:
  dotnet-build:
    name: Dotnet Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore src/Egroo.Server/Egroo.Server.csproj
    - name: Build
      run: dotnet build --no-restore src/Egroo.Server/Egroo.Server.csproj
    - name: Test
      run: dotnet test --no-build --verbosity normal src/Egroo.Server/Egroo.Server.csproj
  docker-build:
    name: Docker Build
    needs: dotnet-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create appsettings
        run: |
              echo '{
                "Logging": {
                  "LogLevel": {
                    "Default": "Information",
                    "Microsoft.AspNetCore": "Warning"
                  }
                },
                "Serilog": {
                  "WriteTo": [
                    {
                      "Name": "File",
                      "Args": {
                        "path": "logs/log.txt",
                        "rollingInterval": "Day"
                      }
                    },
                    {
                      "Name": "Console",
                      "Args": {
                        "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
                        "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
                      }
                    }
                  ]
                },
                "AllowedHosts": "*",
                "ConnectionStrings": {
                  "DefaultConnection": "Server='${{ secrets.REMOTE_HOST_DB }}';Port=5432;User Id='${{ secrets.REMOTE_USER_DB }}';Password='${{ secrets.REMOTE_PASSWORD }}';Database=\"egroo-dev-test\";"
                },
                "Secrets": {
                  "Jwt": "${{ secrets.JWT_UAT }}"
                },
                "Encryption": {
                "Key": "${{ secrets.ENCRYPTION_KEY }}",
                "IV": "${{ secrets.ENCRYPTION_IV }}"
                }
              }' > src/Egroo.Server/appsettings.json
      - name: build docker image
        run: docker build -t jihadkhawaja/mobilechat-server:latest -f src/Egroo.Server/Dockerfile .
      - name: save docker image
        run: |
             docker save -o mobilechat-server.tar jihadkhawaja/mobilechat-server
      - name: copy tar via ssh
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          port: 22
          source: "mobilechat-server.tar"
          target: "/home/ubuntu/images"
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
            docker load -i /home/ubuntu/images/mobilechat-server.tar
            rm /home/ubuntu/images/mobilechat-server.tar

  docker-compose:
    name: Docker Compose
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: copy docker-compose via ssh
          uses: appleboy/scp-action@v0.1.3
          with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            key: ${{ secrets.KEY }}
            port: 22
            source: "src/docker-compose-egroo-test.yml"
            target: "/home/ubuntu/Configurations/"
        - name: executing remote ssh commands
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            key: ${{ secrets.KEY }}
            script: |
                docker compose -f Configurations/src/docker-compose-egroo-test.yml up -d

  uni-test:
    runs-on: ubuntu-latest
    needs: docker-compose
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore src/Egroo.Server.Test/Egroo.Server.Test.csproj

    - name: Build
      run: dotnet build --configuration Release src/Egroo.Server.Test/Egroo.Server.Test.csproj

    - name: Test
      run: dotnet test --logger trx --results-directory TestResults --configuration Release src/Egroo.Server.Test/Egroo.Server.Test.csproj
      continue-on-error: false

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Test Results
        path: TestResults/*.trx
  docker-stop:
    name: Docker Stop
    needs: uni-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
              docker compose -f Configurations/src/docker-compose-egroo-test.yml down
              docker image prune -f
  database-drop:
    name: Database drop
    needs: docker-stop
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.KEY }}
          script: |
            docker exec postgres psql -U ${{ secrets.REMOTE_USER_DB }} -c "drop database \"egroo-dev-test\" WITH ( FORCE );"
